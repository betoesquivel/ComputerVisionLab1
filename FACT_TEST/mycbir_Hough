#!/usr/bin/env python
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
# Content-based image retrieval using RGB histograms, and
# showcasing the function calcHist() from OpenCV.

# The algorithm was described by Adrian Clark and implemented
# by me on the first Computer Vision assignment.

# The purpose of this assignment is to get familiar with OpenCV
# for a common computer vision task.
import cv2, sys, math
import cv2.cv as cv
import numpy as np

def get_crop_suggestion(img_name):
    '''Use the hough transform to identify circles in the img.
    then find the largest circle identified and crop the image
    to the smallest rectangle that encloses that circle.
    Return the cropped image.'''
    img = cv2.imread(img_name,0)
    img = cv2.GaussianBlur(img, (5,5), 0)

    # Calculates the Hough Transform
    # Source: https://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials
    # /py_imgproc/py_houghcircles/py_houghcircles.html
    circles = cv2.HoughCircles(img, cv.CV_HOUGH_GRADIENT, 1, 20, param1=50,
            param2=30, minRadius=0, maxRadius=0)

    largest = [0,0,0]

    for i in circles[0,:]:
        largest = i if i[2] > largest[2] else largest

    min_x = largest[0] - largest[2]
    min_y = largest[1] - largest[2]
    max_x = largest[0] + largest[2]
    max_y = largest[1] + largest[2]

    img = cv2.imread(img_name)
    h, w, c = img.shape

    min_x = 0 if min_x < 0 else min_y
    min_y = 0 if min_y < 0 else min_x

    max_x = h if max_x > h else max_y
    max_y = w if max_y > w else max_x

    return min_y, max_y, min_x, max_x

def calculate_correlation (h1, h2):
    "Work out the correlation between two histograms."
    sumx = sumy = sumxx = sumyy = sumxy = 0.0
    n = len (h1)
    for i in range (0, n):
        v1 = float (h1[i])
        v2 = float (h2[i])
        sumx += v1
        sumy += v2
        sumxx += v1 * v1
        sumxy += v1 * v2
        sumyy += v2 * v2
    v1 = sumxy - sumx * sumy / n
    v2 = math.sqrt((sumxx-sumx*sumx/n) * (sumyy-sumy*sumy/n))
    return abs (v1 / v2)

def rgb_histograms (im):
    """Workout one histogram for each color in the image"""
    b = g = r = []
    b = cv2.calcHist([im], [0], None, [256], [0,256])
    g = cv2.calcHist([im], [1], None, [256], [0,256])
    r = cv2.calcHist([im], [2], None, [256], [0,256])
    return b, g, r

def rgb_merged_histogram (im):
    "Merge all histograms into one large histogram."
    b, g, r = rgb_histograms(im)
    h = np.concatenate((b, g, r), axis=0)
    return h

#------------------------------------------------------------------------------
# Beginning of program
params = sys.argv
if len(params) < 3:
    print >>sys.stderr, 'Usage:', sys.argv[0], '<probe> <test-images>'
    sys.exit (1)

# Get the probe file name.
probe_file = params[1]

# Setup variables that will hold, best match.
best_img_val = 0
best_img_file = '?'

# Read probe image and find its histogram.
miny, maxy, minx, maxx = get_crop_suggestion(probe_file)
im_probe = cv2.imread(probe_file)
im_probe = im_probe[miny:maxy, minx:maxx]
probe_hist = rgb_merged_histogram(im_probe)

# Main Loop
# Load image one by one, get their histogram and correlated with the probe hist.
for file in params[2:]:
    if file != probe_file:
        im = cv2.imread(file)
        im[miny:maxy, minx:maxx]
        test_hist = rgb_merged_histogram(im)

        correlation = calculate_correlation(test_hist, probe_hist)

        if best_img_val < correlation:
            best_img_val = correlation
            best_img_file = file


# Print to standard output best image file.
print best_img_file

