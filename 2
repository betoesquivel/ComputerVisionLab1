#!/usr/bin/env python
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
import cv2, sys, math
import numpy as np
from matplotlib import pyplot as plt

def calculate_correlation (h1, h2):
    "Work out the correlation between two histograms"
    sumx = sumy = sumxx = sumyy = sumxy = 0.0
    n = len (h1)
    for i in range (0, n):
        v1 = float (h1[i])
        v2 = float (h2[i])
        sumx += v1
        sumy += v2
        sumxx += v1 * v1
        sumxy += v1 * v2
        sumyy += v2 * v2
    v1 = sumxy - sumx * sumy / n
    v2 = math.sqrt((sumxx-sumx*sumx/n) * (sumyy-sumy*sumy/n))
    return abs (v1 / v2)

def compare_correlation (h1, h2):
    "Work out the correlation between two histograms"
    sumx = sumy = sumxx = sumyy = sumxy = 0.0
    n = len (h1)
    for i in range (0, n):
        v1 = float (h1[i])
        v2 = float (h2[i])
        sumx += v1
        sumy += v2
        sumxx += v1 * v1
        sumxy += v1 * v2
        sumyy += v2 * v2
    v1 = sumxy - sumx * sumy / n
    v2 = math.sqrt((sumxx-sumx*sumx/n) * (sumyy-sumy*sumy/n))
    return abs (v1 / v2)

def rgb_histograms (im):
    """Workout one histogram for each color
    in the image"""
    b = g = r = []
    b = cv2.calcHist([im], [0], None, [256], [0,256])
    g = cv2.calcHist([im], [1], None, [256], [0,256])
    r = cv2.calcHist([im], [2], None, [256], [0,256])
    return b, g, r

def rgb_merged_histogram (im):
    "Merge all histograms into one large histogram."
    b, g, r = rgb_histograms(im)
    h = b + g + r
    return h

#------------------------------------------------------------
# Beginning of program
params = sys.argv
if len(params) < 3:
    print >>sys.stderr, 'Usage:', sys.argv[0], '<probe> <test-images>'
    sys.exit (1)

# Print openCV version info and init
probe_file = params[1]
best_img_val = 0
best_img_file = '?'
do_display = True

# Read probe image and find its histogram.
im_probe = cv2.imread(probe_file)
probe_hist = rgb_merged_histogram(im_probe)

# Main loop.
# Load image one by one, get their histogram and compare it to the probe image.
for file in params[2:]:
    if file != probe_file:
        print "Processing", file
        im = cv2.imread(file) 
        test_hist = rgb_merged_histogram(im)

        correlation = calculate_correlation(test_hist, probe_hist)

        if best_img_val < correlation:
            best_img_val = correlation
            best_img_file = file


# Print results
print 'Best image is {0} with correlation: {1}'.format(best_img_file, best_img_val)
cv2.imshow('Probe', im_probe)
im_result = cv2.imread(best_img_file)
cv2.imshow('Match', im_result)
